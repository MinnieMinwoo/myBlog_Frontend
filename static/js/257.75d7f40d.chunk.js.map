{"version":3,"file":"static/js/257.75d7f40d.chunk.js","mappings":"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","sources":["components/Share/AlertModal.tsx","routes/Auth.tsx","states/ModalState.tsx"],"sourcesContent":["import React from \"react\";\nimport { useModal } from \"../../states/ModalState\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nconst ModalDialog = styled(Modal.Dialog)`\n  margin: 0;\n`;\n\nconst AlertModal = () => {\n  const { modalDataState, closeModal, closeModalWithCallback } = useModal();\n\n  return (\n    <Modal\n      size=\"lg\"\n      centered\n      show={modalDataState.isOpen}\n      onHide={modalDataState.isConfirm ? closeModal : closeModalWithCallback}\n      className=\"AlertModal\"\n    >\n      <ModalDialog>\n        <Modal.Header closeButton>\n          <Modal.Title>{modalDataState.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{modalDataState.content}</Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"secondary\"\n            onClick={modalDataState.isConfirm ? closeModal : closeModalWithCallback}\n          >\n            {modalDataState.isConfirm ? \"Cancel\" : \"Close\"}\n          </Button>\n          <Button\n            hidden={!modalDataState.isConfirm}\n            variant={modalDataState.buttonColor}\n            onClick={closeModalWithCallback}\n          >\n            Confirm\n          </Button>\n        </Modal.Footer>\n      </ModalDialog>\n    </Modal>\n  );\n};\n\nexport default AlertModal;\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport { isLoadingData } from \"../states/LoadingState\";\nimport { FirebaseError } from \"firebase/app\";\nimport { Button, Col, Form, Stack, Spinner } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nimport { signInEmail, signUpEmail } from \"../logic/authSetting\";\n\nimport { useModal } from \"../states/ModalState\";\nimport AlertModal from \"../components/Share/AlertModal\";\n\nconst AuthBox = styled.div`\n  margin-top: 40vh;\n  transform: translateY(-50%);\n`;\n\nconst AuthButton = styled(Button)`\n  width: 80%;\n  align-self: center;\n`;\n\nconst Auth = () => {\n  const [signIn, setSignIn] = useState(true);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useRecoilState(isLoadingData);\n  const { openModal } = useModal();\n  const navigate = useNavigate();\n\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      const nickname = await (signIn ? signInEmail(email, password) : signUpEmail(email, password));\n      if (nickname) {\n        navigate(`/home/${nickname}`);\n      } else {\n        const errorTitle = \"Email Verification\";\n        const errorText = \"Please complete email verification if you want to login.\";\n        openModal(errorTitle, errorText);\n      }\n    } catch (error) {\n      console.log(error);\n      const errorTitle = signIn ? \"Login Error\" : \"Sign up Error\";\n      let errorText;\n      if (error instanceof FirebaseError) {\n        switch (error.code) {\n          //common login & sign in\n          case \"auth/invalid-email\":\n            errorText = \"You entered wrong email address.\";\n            break;\n          //login failed\n          case \"auth/user-not-found\":\n            errorText = \"The email address you entered does not exist.\";\n            break;\n          case \"auth/wrong-password\":\n            errorText = \"Password do not match.\";\n            break;\n          //sign up failed\n          case \"auth/weak-password\":\n            errorText = \"Password must be at least 6 characters long.\";\n            break;\n          case \"auth/email-already-in-use\":\n            errorText = \"The email address you entered already exists.\";\n            break;\n          default:\n            errorText = \"Server does not work properly. Please try again later.\";\n            break;\n        }\n      } else {\n        errorText = \"Something wrong. Please try again later.\";\n      }\n      openModal(errorTitle, errorText);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n\n  const toggleAccount = () => {\n    setSignIn((prev) => !prev);\n  };\n\n  return (\n    <AuthBox className=\"Auth\">\n      <AlertModal />\n      <Col md={{ span: 6, offset: 3 }} lg={{ span: 4, offset: 4 }}>\n        <Stack gap={3}>\n          <h1>MyBlog</h1>\n          <Form onSubmit={onSubmit}>\n            <Stack gap={3}>\n              <Form.Group controlId=\"email\">\n                <Form.Label>Email adress</Form.Label>\n                <Form.Control\n                  name=\"email\"\n                  type=\"text\"\n                  placeholder=\"email\"\n                  value={email}\n                  required\n                  onChange={onChange}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"password\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"password\"\n                  value={password}\n                  autoComplete=\"off\"\n                  required\n                  onChange={onChange}\n                />\n              </Form.Group>\n              <AuthButton type=\"submit\" disabled={isLoading}>\n                {isLoading ? (\n                  <Spinner\n                    as=\"span\"\n                    animation=\"border\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                  />\n                ) : signIn ? (\n                  \"Sign In\"\n                ) : (\n                  \"Create Account\"\n                )}\n              </AuthButton>\n            </Stack>\n          </Form>\n          <AuthButton variant=\"secondary\" onClick={toggleAccount}>\n            {signIn ? \"Create Account\" : \"Sign In\"}\n          </AuthButton>\n        </Stack>\n      </Col>\n    </AuthBox>\n  );\n};\n\nexport default Auth;\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\n\ntype ModalType = {\n  isOpen: boolean;\n  title?: string;\n  content: string | JSX.Element;\n  closeCallBack?: () => any;\n  isConfirm: boolean;\n  buttonColor?: BootStrapColor;\n};\n\nexport const modalState = atom<ModalType>({\n  key: \"modalState\",\n  default: {\n    isOpen: false,\n    title: \"\",\n    content: \"\",\n    closeCallBack: () => {},\n    isConfirm: false,\n    buttonColor: \"primary\",\n  },\n});\n\nexport const useModal = () => {\n  const [modalDataState, setModalDataState] = useRecoilState(modalState);\n\n  const openModal = useCallback(\n    (\n      title: string,\n      content: string | JSX.Element,\n      closeCallBack?: () => any,\n      isConfirm?: boolean,\n      buttonColor?: BootStrapColor\n    ) => {\n      let contentElement: JSX.Element;\n      if (typeof content === \"string\") {\n        contentElement = <p>{content}</p>;\n      } else {\n        contentElement = content;\n      }\n      setModalDataState({\n        isOpen: true,\n        title: title,\n        content: contentElement,\n        closeCallBack: closeCallBack,\n        isConfirm: isConfirm ?? false,\n        buttonColor: buttonColor ?? \"primary\",\n      });\n    },\n    [setModalDataState]\n  );\n\n  const closeModal = useCallback(() => {\n    setModalDataState((prev) => ({\n      ...prev,\n      isOpen: false,\n    }));\n  }, [setModalDataState]);\n\n  const closeModalWithCallback = useCallback(() => {\n    if (modalDataState.closeCallBack) modalDataState.closeCallBack();\n    setModalDataState((prev) => ({\n      ...prev,\n      isOpen: false,\n    }));\n  }, [modalDataState, setModalDataState]);\n\n  return { modalDataState, openModal, closeModal, closeModalWithCallback };\n};\n"],"names":["ModalDialog","styled","Modal","useModal","modalDataState","closeModal","closeModalWithCallback","size","centered","show","isOpen","onHide","isConfirm","className","closeButton","title","content","variant","onClick","hidden","buttonColor","AuthBox","AuthButton","Button","useState","signIn","setSignIn","email","setEmail","password","setPassword","useRecoilState","isLoadingData","isLoading","setIsLoading","openModal","navigate","useNavigate","onSubmit","event","preventDefault","signInEmail","signUpEmail","nickname","console","log","errorTitle","FirebaseError","code","errorText","onChange","target","name","value","md","span","offset","lg","gap","controlId","type","placeholder","required","autoComplete","disabled","as","animation","role","prev","modalState","atom","key","default","closeCallBack","setModalDataState","useCallback"],"sourceRoot":""}